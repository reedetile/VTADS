---
title: "VTADS preliminary report"
author: "Reed Scott"
format: docx
editor: visual
---

```{r init, include=FALSE}
#Initialize -----------------------------------------
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(unmarked)

# Global Variables-------------------------------------
VTADS <- getwd()

Disease_Data <- read.csv('SummaryData1.csv')
Disease_Data <- Disease_Data[,1:3] #read in results from BD + RV qPCR

field_data <- read.csv('SwabDataMaster.csv')
```

# Key points

I have done the preliminary analysis you requested on the samples provided by Jake. I realized that we never specified what type of analysis I should do. After some thought, I believe that the single season multi-scale occupancy model is a good fit for this preliminary analysis. In this case I worked under the assumption that $\psi$ = occupancy at a pond, $\theta$ = whether BD/RV was detected *during a survey* and p = whether BD/RV was detected on an individual (prevalence). One thought I have had is that we *could* change the analysis to a dynamic single species model, which may be more fitting to compare between surveys. Also please note that I did not do any type of co-occurrence analysis. I'm happy to do so if you think that would be helpful, I just haven't yet because it wasn't on our list of questions.

Below, I provide detail on how I conducted this analysis, however, I wanted to provided a brief summary of my interpretation of the results. For this analysis, we asked three key questions:

1.  Did time, which I interpreted as survey number, have an effect on the detection of BD/RV at each site?
2.  Did probability of occupancy of BD/RV vary by pond?
3.  Did probability of detection of BD/RV vary by species?

In my opinion, preliminary results do not provide strong evidence for any affects of time, pond, or species. So I think we could consider running a subset of the data, such as only looking at one of the survey periods.

This is the short version of what I found, for a more in depth description of my methods, results, and relevant graphs, please read on.

# Prepping the data

I'm going to try to keep this section short, as I think I have a tendency to explain data preparation in more detail than is necessary. However, there are a few key points I wanted to highlight. I think it's worth mentioning the raw data. First, lets discuss Jake's data:

```{r Jakes data}
dim(Disease_Data)
```

This data contains a Sample.Name, whether the sample was positive or negative for BD, and whether it was positive or negative for ranavirus. We have 359 samples from this data.

We also have our field data. This has a large number of variables so I'm not going to show them all. However, I would like to highlight the variables we will use for this analysis: PondID, Survey Number, and Species ID. In this preliminary data we had 24 sites, 3 surveys, and 4 species.

So the first thing I had to do was merge the data. Because we have sample ID's in both dataframes this is a fairly straightforward process. However, because there is some confusion with labeling, only 201 of the 359 samples from Jake had matching SampleIDs.

```{r Merging data}
#remove spaces from disease_data
Disease_Data$Sample.Name <- str_remove(Disease_Data$Sample.Name," ")
field_data$SampleID <- str_remove_all(field_data$SampleID,"-")

colnames(Disease_Data)[1] <- 'SampleID'

Disease_Data$BD.Status[Disease_Data$BD.Status == 'Negative'] <- '0'
Disease_Data$RV.Status[Disease_Data$RV.Status == 'Negative'] <- '0'

Disease_Data$BD.Status <- as.numeric(Disease_Data$BD.Status)
Disease_Data$RV.Status <- as.numeric(Disease_Data$RV.Status)


prelim_data <- Disease_Data %>% 
  left_join(field_data, by = "SampleID")

prelim_data2 <- prelim_data %>% filter(!is.na(ComplexID)) #has 201 obs. 359-201 = 158. Which is the amount of samples
dim(prelim_data2)
```

From here there's some data cleaning / organization that I just want to briefly go over. I limited the number of columns to just the factors we're interested in. I changed the status of BD / RV from zoospres/PFU equivalents to a binary 0/1. I created dummy data (similar to what we did in the initial stages of the NEARMI project) to create all possible combinations of number of visits (max = 3) and number of frogs (max = 14). This way it created an "even" dataframe that could be read in to unmarked. Then I widened the dataframe, and finally broke it in to 3 dataframes (one for site co-variates, one for "observation" co-variates, and one for the detection data) which unmarked requires. Lastly, unmarked does not have a built in variation by $\theta$ so I had to code it in. All of this code can be seen below, and I'm happy to discuss it in more detail. But with this we're ready to use unmarked.

```{r Creating the wide dfs}
### Limit number of columns ###
prelim_data_RV <- prelim_data2 %>% select(c(RV.Status, ComplexID, PondID, SiteID, Survey.Number, CatchOfDay, Species))
prelim_data_BD <- prelim_data2 %>% select(c(BD.Status, ComplexID, PondID, SiteID, Survey.Number, CatchOfDay, Species))

#Change BD/RV status to 0/1
prelim_data_RV$RV.Status <- ifelse(prelim_data_RV$RV.Status > 0, 1,0)
prelim_data_BD$BD.Status <- ifelse(prelim_data_BD$BD.Status > 0, 1,0)

# Let's create some dummy data
Num_visits <- max(prelim_data2$Survey.Number)
Num_frogs <- max(prelim_data2$CatchOfDay)
dummy_RV <- data.frame(RV.Status = rep(NA, time = Num_visits*Num_frogs),
                    ComplexID = rep("Dummy", time = Num_visits*Num_frogs),
                    PondID = rep("Dummy", time = Num_visits*Num_frogs),
                    SiteID = rep("Dummy", time = Num_visits*Num_frogs),
                    Survey.Number = rep(1:Num_visits, times = Num_frogs),
                    CatchOfDay = rep(1:Num_frogs, times = Num_visits),
                    Species = rep(NA, time = Num_visits*Num_frogs))
dummy_BD <- data.frame(BD.Status = rep(NA, time = Num_visits*Num_frogs),
                       ComplexID = rep("Dummy", time = Num_visits*Num_frogs),
                       PondID = rep("Dummy", time = Num_visits*Num_frogs),
                       SiteID = rep("Dummy", time = Num_visits*Num_frogs),
                       Survey.Number = rep(1:Num_visits, times = Num_frogs),
                       CatchOfDay = rep(1:Num_frogs, times = Num_visits),
                       Species = rep(NA, time = Num_visits*Num_frogs))


#then we can rbind to the rv and bd data
prelim_data_RV <- rbind(prelim_data_RV, dummy_RV)
prelim_data_BD <- rbind(prelim_data_BD, dummy_BD)

#Pivot wider so this can be read in to unmarked
RV_wider <- prelim_data_RV %>% pivot_wider(names_from = c("Survey.Number","CatchOfDay"), values_from = c(RV.Status, Species))
BD_wider <- prelim_data_BD %>% pivot_wider(names_from = c("Survey.Number","CatchOfDay"), values_from = c(BD.Status, Species))

#Need to get rid of dummy rows
RV_wider <- filter(.data = RV_wider, !SiteID %in% "Dummy")
BD_wider <- filter(.data = BD_wider, !SiteID %in% "Dummy")

#Okay now we need to order the columns
#separate in to different dataframes
RV_wider_sitecovs <- RV_wider[,1:3]
RV_wider_obsdet <- RV_wider[,4:ncol(RV_wider)]
RV_wider_obsdet <- RV_wider_obsdet[,sort(colnames(RV_wider_obsdet))]
RV_wider_dets <- RV_wider_obsdet[,1:42]
RV_wider_ObsCovs <- RV_wider_obsdet[,43:ncol(RV_wider_obsdet)]

BD_wider_sitecovs <- BD_wider[,1:3]
BD_wider_obsdet <- BD_wider[,4:ncol(BD_wider)] 
BD_wider_obsdet <- BD_wider_obsdet[,sort(colnames(BD_wider_obsdet))]
BD_wider_dets <- BD_wider_obsdet[,1:42]
BD_wider_ObsCovs <- BD_wider_obsdet[,43:ncol(BD_wider_obsdet)]

# #reordering
# RV_wider_dets <- RV_wider_dets[,sort(colnames(RV_wider_dets))]
# RV_wider_ObsCovs <- RV_wider_ObsCovs[,sort(colnames(RV_wider_ObsCovs))]
# 
# BD_wider_dets <- BD_wider_dets[,sort(colnames(BD_wider_dets))]
# BD_wider_ObsCovs <- BD_wider_ObsCovs[,sort(colnames(BD_wider_ObsCovs))]


#Need to code in variable for survey #
S <- 3
SurveyNum_RV <- data.frame(Survey = matrix(rep(1:S, times = nrow(RV_wider)),
                                           nrow = nrow(RV_wider), 
                                           ncol = S,
                                           byrow = TRUE))
SurveyNum_BD <- data.frame(Survey = matrix(rep(1:S, times = nrow(BD_wider)),
                                           nrow = nrow(BD_wider), 
                                           ncol = S,
                                           byrow = TRUE))
```

# Creating models + comparing

I'm not going to explain unmarked in to much detail. The first step is to create an "Unmarked frame" for each disease.

```{r Creating unmarked frames}
#okayyyy lets get read to read these in to unmarked!
RV_frame <- unmarkedMultFrame(y = RV_wider_dets, 
                              siteCovs = RV_wider_sitecovs, 
                              yearlySiteCovs = list(SurveyNum = SurveyNum_RV),
                              obsCovs = list(Species = RV_wider_ObsCovs),
                              numPrimary = 3)

BD_frame <- unmarkedMultFrame(y = BD_wider_dets, 
                              siteCovs = BD_wider_sitecovs, 
                              yearlySiteCovs = list(SurveyNum = SurveyNum_BD),
                              obsCovs = list(Species = BD_wider_ObsCovs),
                              numPrimary = 3)
```

Then, you can start creating models. It's really quite simple! First I created the null model for each disease

```{r null mode}
Null_RV <- goccu(psiformula = ~1, phiformula = ~1, pformula= ~1, RV_frame)
Null_BD <- goccu(psiformula = ~1, phiformula = ~1, pformula= ~1, BD_frame)

plogis(coef(Null_RV))
plogis(coef(Null_BD))
```

I then assessed availability of each disease by survey. Here, I will show the AIC tables so you can assess for yourself.

```{r Survey effects}
#"availability" by survey
surveyMod_RV <- goccu(psiformula = ~1, phiformula = ~SurveyNum, pformula= ~1, RV_frame)
surveyMod_BD <- goccu(psiformula = ~1, phiformula = ~SurveyNum, pformula= ~1, BD_frame)

#fitting models on survey
surveyfit_RV <- fitList('null' = Null_RV, "SurveyEffect" = surveyMod_RV)
modSel(surveyfit_RV)

surveyfit_BD <- fitList('null' = Null_BD, "SurveyEffect" = surveyMod_BD)
modSel(surveyfit_BD)
```

Then I fit occupancy by pond.

```{r Occupancy by pond}
# Occupancy by pond
PondMod_RV <- goccu(psiformula = ~SiteID, phiformula = ~1, pformula = ~1, RV_frame)
PondMod_BD <- goccu(psiformula = ~SiteID, phiformula = ~1, pformula = ~1, BD_frame)

# plogis(coef(PondMod_RV))
# plogis(coef(PondMod_BD))

#fitting models on pond
occufit_RV <- fitList('null' = Null_RV, "PondEffect" = PondMod_RV)
modSel(occufit_RV)

occufit_BD <- fitList('null' = Null_BD, "PondEffect" = PondMod_BD)
modSel(occufit_BD)
```

And lastly, I fit detection by species

```{r det by species}
#detection by species
SppMod_RV <- goccu(psiformula = ~ 1, phiformula = ~1, pformula = ~ Species, RV_frame)
SppMod_BD <- goccu(psiformula = ~ 1, phiformula = ~1, pformula = ~ Species, BD_frame)

#fitting models on species
det_fit_RV <- fitList('null' = Null_RV, "SpeciesEffect" = SppMod_RV)
modSel(det_fit_RV)

det_fit_BD <- fitList('null' = Null_BD, "SpeciesEffect" = SppMod_BD) 
modSel(det_fit_BD)
```

# Plots

There are just a few plots I would like to show. First, since the survey model was relatively close ( AIC scores within 2 points of each other) I decided to graph the effect of survey on availability of each disease

```{r availability, echo=FALSE}
#plotting effect of survey
#RV
survey_pred_RV <- predict(surveyMod_RV, type = "phi")
survey_pred_RV$Survey <- rep(1:3, times = nrow(survey_pred_RV)/S)
RV_Survey_plot <- ggplot(data = survey_pred_RV, aes(x = Survey, y = Predicted))
RV_Survey_plot+
  geom_line()+
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2)+
  theme_classic()+
  ggtitle("Effect of Survey on Ranavirus Availability")

#BD
survey_pred_BD <- predict(surveyMod_BD, type = "phi")
survey_pred_BD$Survey <- rep(1:3, times = nrow(survey_pred_BD)/S)
BD_Survey_plot <- ggplot(data = survey_pred_BD, aes(x = Survey, y = Predicted))
BD_Survey_plot+
  geom_line()+
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2)+
  theme_classic()+
  ggtitle("Effect of Survey on BD Availability")

```

Additionally, the models for detection showed that, for BD, species may have had an effect. So I decided to plot that.

```{r effect of spp on bd detection, echo = FALSE}
plotEffects(SppMod_BD, type = "det", covariate = "Species")
```

# Conclusions

Based on the data provided, it is worth considering looking at only one survey period. I think this warrants some discussion, and want to be sure I'm interpreting this analysis correctly. I also think it's worth considering other factors, such as temperature, and how they may vary with survey period. I personally think that the potential species effect shown in BD means that we should at minimum continuing sampling all species.

This is what I have done for now. I would love to hear your thoughts!
